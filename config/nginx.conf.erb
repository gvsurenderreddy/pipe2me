# See http://nginx.org/en/docs/ and
# http://nginx.org/en/docs/ngx_core_module.html for documentation.

# user       www www;  ## Default: nobody
user <%= `whoami`.chomp %>;
# worker_processes  1;  ## Default: 1

pid <%= VAR %>/pids/nginx.pid;

# error_log    ${{VAR}}/log/proxy-errors.log  main;
error_log      /dev/stderr;

# pid         ${{VAR}}/log/nginx.pid;

# worker_rlimit_nofile 8192;

daemon off;

events {
  worker_connections  1024;
}

http {
  include    nginx/mime.types;
  index      index.html index.htm;

  access_log     /dev/stdout;

  default_type application/octet-stream;
  log_format   main '$remote_addr - $remote_user [$time_local]  $status '
    '"$request" $body_bytes_sent "$http_referer" '
    '"$http_user_agent" "$http_x_forwarded_for"';
  sendfile     on;
  tcp_nopush   on;
  # server_names_hash_bucket_size 128; # this seems to be required for some vhosts

  # The backend can be delivered from an unix socket and a TCP socket. The nginx docs
  # state that "..if an error occurs during communication with a server, the request will
  # be passed to the next server, and so on until all of the functioning servers
  # will be tried. If a successful response could not be obtained from any of the
  # servers, the client will receive the result of the communication with the last server."
  #
  # Running the backend in a development mode then is just disabling the socket server,
  # and starting a development server on port 8888 with shotgun:
  #
  #    monit -c monitrc stop web
  #    shotgun -p 8888
  #
  upstream backend {
    server unix:<%= VAR %>/web.sock;
    server 127.0.0.1:8888;
  }

  <% if HTTP_PORT %>
  server {
    set $root <%= ROOT %>;
    set $ssl off;

    <% if MONIT_PORT %>
    set $monit_port <%= MONIT_PORT %>;
    <% end %>
    listen <%= HTTP_PORT %>;
    include nginx/pipe2me.conf;
    <% if MONIT_PUBLIC_ACCESS %>
    include nginx/monit.conf;
    <% end %>
  }
  <% end %>
	
  <% if HTTPS_PORT %>
  server {
    set $root <%= ROOT %>;
    set $ssl on;

    <% if MONIT_PORT %>
    set $monit_port <%= MONIT_PORT %>;
    <% end %>
    listen                  <%= HTTPS_PORT %>;

    # enable ssl
    ssl                     on;
    ssl_certificate         <%= VAR %>/openssl/certs/localhost.pem;
    ssl_certificate_key     <%= VAR %>/openssl/private/localhost.pem;

    # allow clients to verify via certificate
    ssl_client_certificate  <%= VAR %>/openssl/root/certificate.pem;
    ssl_verify_client       optional;

    # set SSL headers
    # include nginx/ssl.conf;

    # keepalive_timeout    70;
    #
    include nginx/pipe2me.conf;
    <% if MONIT_PUBLIC_ACCESS %>
    include nginx/monit.conf;
    <% end %>
  }
  <% end %>
}
