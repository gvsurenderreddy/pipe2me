# See http://nginx.org/en/docs/ and
# http://nginx.org/en/docs/ngx_core_module.html for documentation.

# user       www www;  ## Default: nobody
user <%= `whoami`.chomp %>;
# worker_processes  1;  ## Default: 1

pid <%= VAR %>/pids/nginx.pid;

# error_log    ${{VAR}}/log/proxy-errors.log  main;
error_log      /dev/stderr;

# pid         ${{VAR}}/log/nginx.pid;

# worker_rlimit_nofile 8192;

daemon off;

events {
  worker_connections  1024;
}

http {
  include    nginx/mime.types;
  index      index.html index.htm;

  access_log     /dev/stdout;

  default_type application/octet-stream;
  log_format   main '$remote_addr - $remote_user [$time_local]  $status '
    '"$request" $body_bytes_sent "$http_referer" '
    '"$http_user_agent" "$http_x_forwarded_for"';
  sendfile     on;
  tcp_nopush   on;
  # server_names_hash_bucket_size 128; # this seems to be required for some vhosts

  # The backend can be delivered from an unix socket and a TCP socket.
  upstream backend {
    #
    # This is a server for the web backend development mode, which can be
    # started, for example, via "script/development"
    server 127.0.0.1:8888;

    #
    # It may seem strange to call this the "backup" server, when, in fact, it
    # is the production server. The idea is that the development server takes
    # precendence when running.
    server unix:<%= VAR %>/web.sock backup;
  }

  <% if HTTP_PORT %>
  server {
    set $root <%= ROOT %>;
    set $ssl off;

    <% if MONIT_PORT %>
    set $monit_port <%= MONIT_PORT %>;
    <% end %>

    listen <%= HTTP_PORT %>;
    set $forwarded_port <%= HTTP_PORT %>;
    include nginx/pipe2me.conf;
    <% if MONIT_PUBLIC_ACCESS %>
    include nginx/monit.conf;
    <% end %>
  }
  <% end %>
	
  <% if HTTPS_PORT %>
  server {
    set $root <%= ROOT %>;
    set $ssl on;

    <% if MONIT_PORT %>
    set $monit_port <%= MONIT_PORT %>;
    <% end %>

    # enable ssl
    ssl                     on;
    ssl_certificate         <%= VAR %>/openssl/private/localhost.pem;
    ssl_certificate_key     <%= VAR %>/openssl/private/localhost.priv;

    # allow clients to verify via certificate
    ssl_client_certificate  <%= VAR %>/miniCA/root.pem;
    ssl_verify_client       optional;

    # set SSL headers
    # include nginx/ssl.conf;

    # keepalive_timeout    70;
    #

    listen                  <%= HTTPS_PORT %>;
    set $forwarded_port <%= HTTPS_PORT %>;

    include nginx/pipe2me.conf;
    <% if MONIT_PUBLIC_ACCESS %>
    include nginx/monit.conf;
    <% end %>
  }
  <% end %>
}
