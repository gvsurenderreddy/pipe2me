#!/usr/bin/env ruby
#
# Derived from https://github.com/radiospiel/inspector
#

# -- configuration ------------------------------------------------------------

SSL=ENV["SSL"].to_i != 0

PIPE2ME_TUNNEL=ENV["PIPE2ME_TUNNEL"]

if PIPE2ME_TUNNEL && !File.directory?(PIPE2ME_TUNNEL)
  STDERR.puts "Missing directory #{PIPE2ME_TUNNEL.inspect}"
  exit 1
end

if SSL && !PIPE2ME_TUNNEL
  STDERR.puts "Missing PIPE2ME_TUNNEL environment setting"
  exit 1
end

# -- A rack application -------------------------------------------------------

require "rack"

def format_hash(hash)
  hash.to_a.
    sort_by(&:first).map do |key, value| 
      "%25s: %s\n" % [ key.to_s.gsub(/^HTTP_/, ""), value.inspect ] 
    end.
    join
end

def insp(env)
  request = Rack::Request.new(env)
  headers, process_env = env.partition do |k,v| k =~ /^HTTP_/ end
  [
    "# Request\n\n",
    format_hash(request_method: request.request_method, fullpath: request.fullpath),
    "\n# Headers\n\n",
    format_hash(headers),
    "\n# process environment\n\n",
    format_hash(ENV)
  ].join("\n")
end

Application = proc do |env|
  req = Rack::Request.new(env)
  body = req.path != "/" ? "#{req.request_method} #{req.fullpath}\n" : insp(env)
  
  [
    200, 
    { 'Content-Type' => 'text/plain' }, 
    [ body ]
  ]
end

# -- configure rack server ----------------------------------------------------

require "webrick/https"

options = {
  :app => Application,
  :Port => ENV["PORT"] || 8080,
  :server => "webrick",
  :Logger => WEBrick::BasicLog.new($stderr, WEBrick::BasicLog::WARN)
}

if SSL

  options.update SSLEnable: true,
    SSLVerifyClient:        OpenSSL::SSL::VERIFY_NONE,
    SSLPrivateKey:          OpenSSL::PKey::RSA.new(File.read("#{PIPE2ME_TUNNEL}/openssl.privkey.pem")),
    SSLCertificate:         OpenSSL::X509::Certificate.new(File.read("#{PIPE2ME_TUNNEL}/openssl.pem")),
    SSLCertName:            [["CN", WEBrick::Utils::getservername]]
end

Rack::Server.start(options)
