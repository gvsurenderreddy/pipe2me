# pipe2me

pipe2me lets you publish TCP services on the internet that are potentially running behind
a NATting proxy.

## Overview

pipe2me manages connections from clients to servers behind a NAT proxy. It allows to
access services that you provide on your hardware. pipe2me assigns custom port(s) to
your connection, provides a unique domain name and an openssl certificate bound to 
that domain name.

This document uses these names for the involved machinery:

- **server**: the pipe2me server.
 computer which wants to connect  
- **consumer**: a computer which wants to connect  
- **pod**: a computer running a number of services that you want to publish.

Each pipe2me server instance manages a single domain (for example: pipe2.me) and its 
subdomains (for example: pink-unicorn.pipe2.me). Each pod gets assigned a unique 
subdomain.

pipe2me manages the DNS settings for the subdomain to allow for short-circuiting traffic
between consumers and pods if both are behind the same router without compromising
accessibility from consumers in other locations.

## pipe2me server

The pipe2me server lives in the `-/api` subdirectory.

### Installation

To download and install the server software:

    git clone ...
    cd api
    bundle install
    rake dependencies:install
    rake db:migrate

Note: pipe2me is developed under MRI ruby version 2.0 on Debian. Other rubies and
other systems might or might not work. You have been warned!

### Configuring the server

On startup the server reads its configuration from the file `~/pipe2me.server.conf`.
This file should contain the following settings:

- `TUNNEL_DOMAIN`: set the server hostname: Each server serves connections for 
  subdomains of a specific domain. For example, set TUNNEL_DOMAIN to `tunnels.pipe2.test`
  to run tunnels with names like `pink-unicorn.tunnels.pipe2.test`.
- `TUNNEL_PORTS`: set the range of tunnels available for the server, e.g. "10000...15000"
- `DYNAMIC_DNS_SERVICE`: which service manages DNS settings? Only currently supported service is 
  dnsimple.com; the DNS_SERVICE setting should be "dnsimple:<api_token>". See "Dynamic DNS Configuration"
  below.

An example configuration can be found in `doc/pipe2me.server.conf.example`.
  
### DNS Configuration

A pipe2me server manages a number of subdomains for a given domain. This domain must
be configured in `TUNNEL_DOMAIN`. DNS for this domain must be configured so that both 
the domain as any wildcard subdomain resolves to the pipe2me server. For example, the
`test.pipe2.me` DNS entries are configured like this:

    ~ > dig  test.pipe2.me +noall +answer *.test.pipe2.me +noall +answer
    ; <<>> DiG 9.8.5-P1 <<>> test.pipe2.me +noall +answer *.test.pipe2.me +noall +answer
    ;; global options: +cmd
    test.pipe2.me.		220	IN	A	146.185.137.78
    *.test.pipe2.me.	563	IN	A	146.185.137.78

#### Dynamic DNS Configuration

We recommend combining pipe2me with a dynamic DNS service. This lets clients "short-cut" the 
connection to a pod if 

- both live in the same network,
- the client can open all requested ports on the router, and
- the DNS service for your domain provides API access to edit DNS records.

The dynamic DNS service is configured with the `DYNAMIC_DNS_SERVICE` setting. The only supported
service is dnsimple.com; the DYNAMIC_DNS_SERVICE setting should be "dnsimple:<api_token>".

Note: If you wat to support this project and decide to use dnsimple.com for your domains
please use this link to sign up with dnsimple: 
[https://dnsimple.com/r/678c541be02c40](https://dnsimple.com/r/678c541be02c40)

### Configuring the IP stack.

[todo]

- Reuse closed sockets
- Increase number of available sockets

### Running the server

To **run the pipe2me server in the foreground** change into the `./api` directory and run:

    foreman start

To **install the pipe2me server as a inittab service** change the `./api` directory and run:

    foreman export ...
    ...

To **install the pipe2me server as a /etc/init.d service** change the `./api` directory and run:

    foreman export ...
    ...

## pipe2me pod client

The pipe2me pod client lives in the client/ruby directory. In the future we will provide 
additional client implementations, with the idea to replace the ruby client with something
else, probably a client written in `{ba}sh`, but this is still the future.

### Installation

    git clone ...
    cd api
    bundle install
    rake dependencies:install

### Configuring tunnels

To configure one or more tunnels run this command:
 
    pipe2me setup \
      --server server.name \
      --auth this-is-your-auth-token \
      --protocols http,https,imap \
      --local-ports 20102,20103,20104 \

This reserves all resources for the requested tunnel on the server; including a 
single customized FQDN for these tunnels and a certificate for this FQDN.

The *auth-token* is the "currency" for the pipe2me server. How to obtain an auth-token
is outside the scope of this document. However, each auth-token allows to create a
single tunnel set with an upper limit on the number of tunnels.

# Start configured tunnels

## Hacking pipe2me

### Running tests

    cd test
    ./run

### Contributing & Licensing

#### server software licensing

**The pipe2me server software** is released to you under the terms of the 
"GNU Affero General Public License, version 3". (See the file COPYING.AGPL for details). 
That means you are free to use, modify, ad redistribute the software **under some conditions** 
that are laid out in the license. In short, you cannot redistribute the software to 
someone else without giving them the same rights to your modifications that we gave you to our
codebase. It also means that you cannot run a modified version of the pipe2me server
software without letting your user access your modifications under the same terms.

For more details see the file COPYING.APL, for a more thorough discussion compare [http://en.wikipedia.org/wiki/Affero_General_Public_License](http://en.wikipedia.org/wiki/Affero_General_Public_License).

This affects all code in the `./api` subtree, unless otherwise stated in the the respective files.

#### client software licensing

**The pipe2me client software** is released to you under the terms of the MIT License (MIT), see  
COPYING.MIT for details.

This affects all code not in the `./api` subtree, unless otherwise stated in the respective files.

#### Contributing

However, licensing is a slightly different matter if you want to contribute back to the project. 

Because we don't know yet if we stick to the AGPL license for the future, we need you to
give us the right to relicense your modifications without having to ask you. If you submit 
a pull request please make sure that you agree to that terms, or else we cannot merge your 
changes back into the main codebase. This sounds complicated, but note that you could 
(and probably should) license your contributions under the terms of the MIT License.

If you feel unsure about this feel free to discuss this issue with us.

(c) The kinko team, 2014



